{"version":3,"sources":["webpack://./src/components/cookiebar/_cookiebar.scss","webpack://./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA,cACE,QAAA,CACA,cAAA,CACA,MAAA,CACA,cAAA,CACA,OAAA,CACA,KAAA,CACA,eADF,CCoDI,yBD/CI,4CACE,sCAAA,CACA,oCAFR,CACF,CC2DI,4BDlDI,4CACE,sCAAA,CACA,cANR,CAWI,iDACE,sCATN,CAyBE,iKAEE,wCAdJ,CACF,CAgBE,sBACE,SAdJ,CAeI,qCACE,YAbN,CAeI,iCACE,aAbN,CAkBI,4EACE,YAbN,CAgBM,yCACE,yJAZR,CAgBM,+CACE,gBAdR,CAkBE,0BACE,eAhBJ,CAkBE,uBACE,YAAA,CACA,qBAhBJ,CAkBE,yBACE,YAAA,CACA,yCAhBJ,CAmBI,+CACE,sCAAA,CACA,sCAAA,CACA,gBAAA,CACA,UAjBN,CAmBI,4CACE,sCAAA,CACA,wCAjBN,CAoBE,6BACE,MAAA,CACA,iBAlBJ,CAmBI,mCACE,YAjBN,CAoBE,oDAEE,kCAlBJ,CAsBI,2EACE,iCAAA,CACA,WAnBN,CAsBE,6BACE,4BAAA,CACA,wCApBJ,CAuBI,oCACE,gCArBN,CA4BI,2EACE,wCAvBN","file":"cookiebar.min.min.css","sourcesContent":["@import \"../../partial/scss/base\";\n\n.#{$prefix}cookiebar {\n  bottom: 0;\n  cursor: default;\n  left: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 1000000;\n  @include media-breakpoint-up(sm) {\n    .actions {\n      .br-button {\n        &.secondary {\n          margin-bottom: v(spacing-scale-2xh);\n          margin-right: v(spacing-scale-5x);\n        }\n      }\n    }\n  }\n  @include media-breakpoint-down(xs) {\n    .actions {\n      .br-button {\n        &.secondary {\n          margin-bottom: v(spacing-scale-2xh);\n          margin-right: 0;\n        }\n      }\n    }\n    .br-modal-header {\n      .br-modal-title p {\n        font-size: v(font-size-scale-up-02);\n      }\n    }\n    .group-description {\n      font-size: v(font-size-scale-down-01);\n    }\n    .br-switch {\n      label {\n        font-size: v(font-size-scale-down-01);\n      }\n      .switch-data {\n        &::before {\n          font-size: v(font-size-scale-down-01);\n        }\n      }\n    }\n    .group-name,\n    .group-size {\n      font-size: v(font-size-scale-down-01);\n    }\n  }\n  &.default {\n    top: unset;\n    .entry-content {\n      display: none;\n    }\n    .info-text {\n      display: block;\n    }\n    .main-content {\n      display: none;\n    }\n    .parallel-content {\n      display: none;\n    }\n    .br-modal {\n      > .br-card {\n        --card-shadow: var(--surface-offset-none)\n          calc(var(--surface-offset-md) * -1) var(--surface-blur-lg)\n          rgba(var(--rgb-secondary-09), var(--surface-opacity-xs));\n      }\n      .br-modal-body {\n        overflow-y: unset;\n      }\n    }\n  }\n  .entry-text {\n    margin-bottom: 0;\n  }\n  .wrapper {\n    display: flex;\n    flex-direction: column;\n  }\n  .info-text {\n    display: none;\n    line-height: v(font-lineheight-medium);\n  }\n  .br-modal-header {\n    .br-modal-title {\n      font-size: v(font-size-scale-up-06);\n      margin-bottom: v(spacing-scale-3xh);\n      max-height: unset;\n      width: auto;\n    }\n    .last-update {\n      font-size: v(font-size-scale-up-01);\n      font-weight: v(font-weight-semi-bold);\n    }\n  }\n  .br-modal-body {\n    flex: 1;\n    overflow-y: scroll;\n    &:focus {\n      outline: none;\n    }\n  }\n  .group-name,\n  .group-size {\n    color: v(color-primary-default);\n  }\n  .group-info,\n  .cookie-info {\n    .br-switch {\n      padding: v(spacing-scale-half);\n      width: 120px;\n    }\n  }\n  .always-active {\n    color: v(color-highlight);\n    font-weight: v(font-weight-semi-bold);\n  }\n  .cookie-info {\n    .br-card {\n      margin-bottom: var(--card-margin);\n    }\n    .cookie-term {\n      font-weight: v(font-weight-semi-bold);\n    }\n  }\n  .notes {\n    p:first-child {\n      font-weight: v(font-weight-semi-bold);\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}